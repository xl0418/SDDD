load()
load_all()
load_all()
setwd('~/Googlebox/Research/Project1/R_pro1/Final/SDDD')
load_all()
load()
install.packages('devtools',dependencies=T)
library('devtools')
library('devtools')
install.packages("DDD")
library(SDDD)
Nindex
library(SDDD)
library(SDDD)
SimMdata()
SimMdata <- function(n, parsN ,age=20,pars=c(0.8,0.3,20), seed = c(1:100), lambda_allo0=0.2, M0=0,rn=100,num,K_fix = 1,dirname){
mainDir = dirname
subDir = paste(n,"Modeltestgroup",age,"age",num,sep = "")
dir.create(file.path(mainDir, subDir), showWarnings = FALSE)
for (i in 1:rn){
seed_fun = seed[i]
result = MMM_sim(n = n, parsN=parsN,age=age,pars = pars, seed_fun = seed_fun,  lambda_allo0=lambda_allo0, M0=M0,K_fix = K_fix)
file = paste(mainDir,n,"Modeltestgroup",age,"age",num,"/out",i,"sim.Rdata",sep = "")
save(result,file = file)
}
}
getwd()
dirname = paste0("C:/Liang")
library(SDDD)
Simdata
SimMdata
dirname
simpackage(dirname = dirname)
library(SDDD)
simpackage(dirname = dirname)
library(SDDD)
simpackage(dirname = dirname)
library(SDDD)
simpackage(dirname = dirname)
mainDir = dirname
mainDir
library(SDDD)
simpackage(dirname = dirname)
plot(x/exp(x^2),-10,10)
curve(x/exp(x^2),-10,10)
curve(0.1*x/exp(x^2),-10,10)
curve(0.1*x/exp(0.1*x^2),-10,10)
curve(0.1*sign(x)/exp(0.1*x^2),-10,10)
curve(0.1*sign(x)/exp(0.1*x^2),-10,10,type = s)
curve(0.1*sign(x)/exp(0.1*x^2),-10,10,type = "s")
library(ggplot)
install.packages("ggplot")
install.packages("ggplot2")
library(ggplot2)
eq <- function(x)
ifelse( x>=0,0.1*x/exp(0.1*x^2))
ifelse( x<0, -0.1*x/exp(0.1*x^2))
ggplot(data.frame(x=c(-5,5)), aes(x)) +stat_function(fun=eq, geom="step")
?stat_function
library(ggplot2)
eq <- function(x)
ifelse( x>=0,0.1*x/exp(0.1*x^2))
ifelse( x<0, -0.1*x/exp(0.1*x^2))
ggplot(data.frame(x=c(-5,5)), aes(x)) +stat_function(fun=eq, geom="step",n = 101)
?stat_function
example(plot.stepfun)
ggplot(data.frame(x=c(-5,5)), aes(x)) +stat_function(fun=eq, geom="step")
eq <- function(x){
ifelse( x>=0,0.1*x/exp(0.1*x^2))
ifelse( x<0, -0.1*x/exp(0.1*x^2))
}
ggplot(data.frame(x=c(-5,5)), aes(x)) +stat_function(fun=eq, geom="step")
library(ggplot2)
eq <- function(x){
ifelse( x>0,0.1*x/exp(0.1*x^2))
ifelse( x<0, -0.1*x/exp(0.1*x^2))
}
ggplot(data.frame(x=c(-5,5)), aes(x)) +stat_function(fun=eq, geom="step")
library(ggplot2)
eq <- function(x){
ifelse( x>0,0.1*x/exp(0.1*x^2))
ifelse( x<0, -0.1*x/exp(0.1*x^2))
}
plot(eq,from = -10,0)
plot(eq,from = -10,to = 0)
plot(eq,from = -10,to = -0.0001)
eq <- function(x){
ifelse( x>0,0.1*x/exp(0.1*x^2))
ifelse( x<0, -0.1*x/exp(0.1*x^2))
}
eq(0)
eq(-0.0001)
eq(-1)
eq <- function(x){
y = 0.1*sign(x)/exp(0.1*x^2)
return(y)
}
eq(-1)
eq(-0.001)
eq(0)
plot(eq,from = -10,to = -0.0001)
plot(eq,from = -10,to = -0.0001)
plot(eq,from = 0.0001,to = 10,add = TRUE)
plot(eq,from = -10,to = 10)
?plot
plot(eq,from = -10,to = -0.001,xlim=c(-10,10) )
plot(eq,from = 0.0001,to = 10,add = TRUE,xlim=c(-10,10))
plot(eq,from = -10,to = -0.001,xlim=c(-10,10) ,ylim = c(-0.1, 0.1))
plot(eq,from = 0.0001,to = 10,add = TRUE,xlim=c(-10,10),ylim = c(-0.1, 0.1))
plot(eq,from = -10,to = -0.001,xlim=c(-10,10) ,ylim = c(-1, 1))
eq <- function(x){
y = 1*sign(x)/exp(1*x^2)
return(y)
}
plot(eq,from = -10,to = -0.001,xlim=c(-10,10) ,ylim = c(-1, 1))
plot(eq,from = 0.0001,to = 10,add = TRUE,xlim=c(-10,10),ylim = c(-1, 1))
source('C:/Liang/Googlebox/Research/Project1/R_pro1/Final/sddsim-d.R', echo=TRUE)
result = sddsim(n = 2,parsN = c(1,1),age = 20,lambda_n = c(0.8,0.4),mu_n = 0.2,K_n = c(10,20),M0_n = c(1,2))
source('C:/Liang/Googlebox/Research/Project1/R_pro1/Final/sddsim-d.R', echo=TRUE)
result = sddsim(n = 2,parsN = c(1,1),age = 20,lambda_n = c(0.8,0.4),mu_n = 0.2,K_n = c(10,20),M0_n = c(1,2))
source('C:/Liang/Googlebox/Research/Project1/R_pro1/Final/SDDD/R/Nindex.R', echo=TRUE)
source('C:/Liang/Googlebox/Research/Project1/R_pro1/Final/SDDD/R/event_matrix.R', echo=TRUE)
result = sddsim(n = 2,parsN = c(1,1),age = 20,lambda_n = c(0.8,0.4),mu_n = 0.2,K_n = c(10,20),M0_n = c(1,2))
source('C:/Liang/Googlebox/Research/Project1/R_pro1/Final/sddsim-d.R', echo=TRUE)
result = sddsim(n = 2,parsN = c(1,1),age = 20,lambda_n = c(0.8,0.4),mu_n = 0.2,K_n = c(10,20),M0_n = c(1,2))
source('C:/Liang/Googlebox/Research/Project1/R_pro1/Final/sddsim-d.R', echo=TRUE)
result = sddsim(n = 2,parsN = c(1,1),age = 20,lambda_n = c(0.8,0.4),mu_n = 0.2,K_n = c(10,20),M0_n = c(1,2))
result = sddsim(n = 2,parsN = c(1,1),age = 20,lambda_n = c(0.8,0.4),mu_n = 0.2,K_n = c(10,20))
n = 2
parsN = c(1,1)
age = 20
lambda_n = c(0.8,0.7)
mu_n = c(0.2,0.3)
K_n = 20
seed_fun = 29
lambda_allo0 = 0.2
M0=1
K_fix = 1
length(parsN) == n
event_info_track = NULL
brts = c(0,"start")
lambda0 = lambda_n
mu0 = mu_n
lambda0
#fix K, the carrying capacity
if(K_fix == 1) {  K = K_n   # K is carrying capacity
K= lambda0*K/(lambda0 - mu0) # here it is K'
}
#fix K', the limit to the diversity
if(K_fix == 0){K = K_n}
if(length(K) == 1){
K_loc = rep(K_n,n)   # carrying capacity for each location
}
if(length(K) > 1){
K_loc = K   # carrying capacity for each location
}
K_loc
K
probs_record = NULL
t <- 0
# string of events
#track locations as the maps of the "phylo" class
track_loc = list()
for(i in 1:n){
track_loc[[i]]=0
names(track_loc[[i]])=c(paste(i))
}
N=sum(parsN)
Ntable_index = Nindex(n)
Nlength = sum(Ntable_index)
Ntable = matrix(0,nrow =1, ncol =Nlength)
Ntable[1:n] = parsN
i=0
# L : Ltable used in L2phylo function of DDD package
# L = data structure for lineages,
# . L[,1] = branching times
# . L[,2] = index of parent species
# . L[,3] = index of daughter species
# . L[,4] = time of extinction
# . L[,5] = index of location
# j = index running through L
loctable= NULL
L = NULL
for(j in 1:N){
loc = which(Ntable[1,]!=0)
L = rbind(L, c(0, 1-j, (-1)^j*j, -1, loc[1]))
L = matrix(L, ncol = 5)
loc1= matrix(0,1,n)
loc1[1,loc[1]] = 1
loctable = rbind(loctable, loc1)
linlist = cbind(L[,3], L[,5])
Ntable[1,loc[1]] = Ntable[1,loc[1]] -1
newL=j
}
L
Ntable = matrix(0,nrow =1, ncol =Nlength)
Ntable[1:n] = parsN
spec_num = sum(Nindex(n)[1,])
N_loc = matrix(0,nrow = n,ncol = spec_num)
N_loc_col = matrix(0,nrow = n,ncol = spec_num)
Ndistribution = event_matrix(n)
#index for sym speciation
for(j in 1:n){
N_loc_col[j,] = which(Ndistribution[j,] == 1,arr.ind = TRUE)#index of each loc in sym spec table
}
B_symspec = c(N_loc_col)
#index for extinction
B_ext = NULL
x = Ndistribution
y = split(x, rep(1:ncol(x), each = nrow(x)))
for(j in 1:n){
x1 = x
x1[j,] = x1[j,]-1
y1 = split(x1, rep(1:ncol(x1), each = nrow(x1)))
z = match(y1,y)
z = z[!is.na(z)]
B_ext = rbind(B_ext, z)
}
B_ext = c(rep(0,n), B_ext)
#index for allo speciation
lambda_allo = NULL
allo_dau1 = NULL
allo_dau2 = NULL
allo_par = NULL
N_allo = colSums(Ndistribution)
for(j in 1:(n-1)){
allo_index = which(N_allo > 1 )
allo_matrix = Ndistribution[,allo_index,drop = FALSE]
allo_matrix_daughter = matrix(0,nrow = nrow(allo_matrix),ncol = ncol(allo_matrix))
allo_matrix_daughter1 = allo_matrix_daughter
allo_matrix_daughter1[1:j,] = allo_matrix[1:j,]
allo_matrix_daughter2 = allo_matrix
allo_matrix_daughter2[1:j,] = 0
allo_col_cut1 = which(colSums(allo_matrix_daughter1) == 0)
allo_col_cut2 = which(colSums(allo_matrix_daughter2) == 0)
allo_col_cut = c(allo_col_cut1,allo_col_cut2)
if(length(allo_col_cut) != 0) {
allo_matrix_daughter1_rest = allo_matrix_daughter1[,-allo_col_cut]
allo_matrix_daughter2_rest = allo_matrix_daughter2[,-allo_col_cut]
allo_index_final = allo_index[-allo_col_cut]
}
else {
allo_matrix_daughter1_rest = allo_matrix_daughter1
allo_matrix_daughter2_rest = allo_matrix_daughter2
allo_index_final = allo_index
}
allo_dau1 = cbind(allo_dau1,allo_matrix_daughter1_rest)
allo_dau2 = cbind(allo_dau2,allo_matrix_daughter2_rest)
allo_par = c(allo_par, allo_index_final)
}
B_allodau1 = match(data.frame(allo_dau1),data.frame(Ndistribution))
B_allodau2 = match(data.frame(allo_dau2),data.frame(Ndistribution))
allo_index = allo_par
matrix_allo = rbind(B_allodau1,B_allodau2,allo_index)
duplicated.columns <- duplicated(t(matrix_allo))
new.matrix <- matrix_allo[, !duplicated.columns,drop = FALSE]
B_allodau1 = new.matrix[1,]
B_allodau2 = new.matrix[2,]
allo_index = new.matrix[3,]
#index for migration
B_mig_target = which(Ndistribution == 0, arr.ind = TRUE)
B_mig_from = c(B_mig_target[,2])
B_mig_to = c(B_mig_target[,1])
B_mig_bec = NULL
for(j in 1:length(B_mig_from)){
Ndis_aftermig = Ndistribution
Ndis_aftermig[B_mig_to[j],B_mig_from[j]] = 1
loc_aftermig = as.vector(Ndis_aftermig[,B_mig_from[j]])
B_mig_bec = c(B_mig_bec,which(sapply( y ,function(x)all(x==loc_aftermig))))
}
B_mig_bec = as.numeric(B_mig_bec)
#number of events
#sym spec
num_ss = 0
for(i in 1:(n-1))
{
num_ss = num_ss+choose(n-1,i)
}
num_ss = n*(1+num_ss)
#ext
num_ext = num_ss
#allo spec
num_as = length(allo_index)
#mig
num_mig = 0
for(i in 1:(n-1)){
num_mig = num_mig + choose(n,i)*(n-i)
}
#number of events
num_event = num_ss + num_ext + num_as + num_mig
probs_part1 = num_ss
probs_part2 = num_ext
probs_part3 = num_as
probs_part4 = num_mig
B<- c(1:num_event)
i = 0
log_likelihood = 0
t[i+1]< age
i<-i+1
# speciation event & extinction event
lambda_sym = rep(0,n)
if(length(lambda0) == 1) lambda0 = rep(lambda0,n)
if(length(mu0) == 1) mu = rep(mu0,n)
else mu = mu0
sym_spec_event = matrix(0,nrow = n,ncol = spec_num)
ext_event = matrix(0,nrow = n,ncol = spec_num)
for(j in 1:n){
N_loc[j,] = Ntable[i,which(Ndistribution[j,]==1)]  #number of each loc in sym spec table
lambda_sym[j]=max(lambda0[j]*(1-sum(N_loc[j,])/K_loc[j]),0)
sym_spec_event[j,] = lambda_sym[j]*N_loc[j,]
ext_event[j,] = mu[j] *N_loc[j,]
}
prob_spec_sym = c(sym_spec_event)
prob_ext = c(ext_event)
length(mu0) == 1
mu0
mu
if(length(mu0) == 1){ mu = rep(mu0,n)
}else mu = mu0
mu
sym_spec_event = matrix(0,nrow = n,ncol = spec_num)
ext_event = matrix(0,nrow = n,ncol = spec_num)
for(j in 1:n){
N_loc[j,] = Ntable[i,which(Ndistribution[j,]==1)]  #number of each loc in sym spec table
lambda_sym[j]=max(lambda0[j]*(1-sum(N_loc[j,])/K_loc[j]),0)
sym_spec_event[j,] = lambda_sym[j]*N_loc[j,]
ext_event[j,] = mu[j] *N_loc[j,]
}
prob_spec_sym = c(sym_spec_event)
prob_ext = c(ext_event)
lambda0
prob_spec_sym
prob_ext
# Migration
prob_mig = NULL
Mig_dir = rep(0,n)
for(j in 1:n){
Mig_dir[j] = max(M0*(1-sum(N_loc[j,])/K_loc[j]),0)
}
for(j in 1:(ncol(Ntable)-1)){
tar = which(Ndistribution[,j]==0)
prob_mig_each = Ntable[i,j]*Mig_dir[tar]
prob_mig_each = matrix(prob_mig_each,ncol = length(prob_mig_each))
prob_mig = cbind(prob_mig,prob_mig_each)
}
prob_mig = c(prob_mig)
prob_mig
lambda_allo = NULL
for(j in allo_index){
Mig_base =  M0
if(Mig_base == 0) lambda_allo_each = 1*Ntable[i,j]
else lambda_allo_each = max(lambda_allo0/Mig_base[j], 0 )*Ntable[i,j]
lambda_allo = cbind(lambda_allo,lambda_allo_each)
}
prob_spec_allo = c(lambda_allo)
#probs of all events
probs= c(prob_spec_sym,prob_ext,prob_spec_allo,prob_mig)
probs_record = rbind(probs_record,probs)
#Total rate
TR =sum(probs)
TR
probs
prob_mig
# Allopatric speciation event
lambda_allo = NULL
for(j in allo_index){
Mig_base =  M0
if(Mig_base == 0) lambda_allo_each = 1*Ntable[i,j]
else lambda_allo_each = max(lambda_allo0/Mig_base, 0 )*Ntable[i,j]
lambda_allo = cbind(lambda_allo,lambda_allo_each)
}
prob_spec_allo = c(lambda_allo)
prob_spec_allo
#probs of all events
probs= c(prob_spec_sym,prob_ext,prob_spec_allo,prob_mig)
probs_record = rbind(probs_record,probs)
#Total rate
TR =sum(probs)
TR
source('C:/Liang/Googlebox/Research/Project1/R_pro1/Final/sddsim-d.R', echo=TRUE)
result = sddsim(n = 2, parsN = c(1,1), lambda_n = c(0.8,0.7),mu_n = c(0.2,0.1),K_n = 20)
result$L
result$tes
result = sddsim(n = 2, parsN = c(1,1), lambda_n = c(0.8,0.7),mu_n = c(0.2,0.1),K_n = c(20,30))
result = sddsim(n = 2, parsN = c(1,1), lambda_n = 0.8,mu_n = c(0.2,0.1),K_n = c(20,30))
result = sddsim(n = 2, parsN = c(1,1), lambda_n = 0.8,mu_n = 0.2,K_n = c(20,30))
result = sddsim(n = 2, parsN = c(1,1), lambda_n = 0.8,mu_n = 0,K_n = c(20,30))
result$tes
result = sddsim(n = 2, parsN = c(1,1), lambda_n = 0.8,mu_n = 0,K_n = 30)
result$tes
result = sddsim(n = 2, parsN = c(1,1), lambda_n = 0.8,mu_n = c(0,0.4),K_n = 30)
result$tes
result = sddsim(n = 2, parsN = c(1,1), lambda_n = 0.8,mu_n = c(0,0.4),K_n = 30,M0 = 0)
result$tes
result = sddsim(n = 2, parsN = c(1,1), lambda_n = 0.8,mu_n = c(0,0.4),K_n = 30,M0 = 0,K_fix = 0)
result$tes
result = sddsim(n = 2, parsN = c(1,1), lambda_n = 0.8,mu_n = c(0,0.4),K_n = 1000000,M0 = 0,K_fix = 0)
result = sddsim(n = 2, parsN = c(1,1), lambda_n = 0.8,mu_n = c(0,0.4),K_n = 1000000,M0 = 0,K_fix = 0,age = 5)
result$tes
result = sddsim(n = 2, parsN = c(1,1), lambda_n = 0.8,mu_n = c(0,0.4),K_n = 1000000,M0 = 0,K_fix = 0,age = 15)
result$tes
result = sddsim(n = 2, parsN = c(1,1), lambda_n = 0.8,mu_n = c(0,0.4),K_n = 1000000,M0 = 0,K_fix = 0,age = 10)
result$tes
source('C:/Liang/Googlebox/Research/Project1/R_pro1/Final/sddsim-d.R', echo=TRUE)
result = sddsim(n = 2, parsN = c(1,1), lambda_n = 0.8,mu_n = c(0,0.4),K_n = 1000000,M0 = 0,K_fix = 0,age = 10)
result = sddsim(n = 2, parsN = c(1,1), lambda_n = 0.8,mu_n = c(0,0.4),K_n = 1000000,M0 = 0,K_fix = 0,age = 15)
result$tes
result = sddsim(n = 2, parsN = c(1,1), lambda_n = 0.8,mu_n = c(0,0.4),K_n = 1000000,M0 = 1,K_fix = 0,age = 15)
TR = 60000
t_wait = rexp(1,rate=TR)
t_wait
# ex 2.01.R
library(DDD)
library(MASS)
library(rgl)
install.packages("rgl")
library(rgl)
library(stringr)
library(phytools)
source('~/Googlebox/R/MMgit/L2phylo_loc.R')
getwd()
set.seed(123)
j = 2
num = 131
i=1
dropextinct = TRUE
file1 = paste("/Volumes/Liang/Research/data/cluster_Kpri_20/",j,"Modeltestgroup15age",num,sep = "")
file = paste(file1,"/","out",i,"sim.Rdata",sep = "")
load(file = file)
load(file = file)
file
load(file = file)
file
# file1 = paste("/Volumes/Liang/Research/data/cluster_Kpri_20/",j,"Modeltestgroup15age",num,sep = "")
file1 = paste("D:/Liang/Research/data/cluster_Kpri_20/",j,"Modeltestgroup15age",num,sep = "")
file = paste(file1,"/","out",i,"sim.Rdata",sep = "")
load(file = file)
file
# file1 = paste("/Volumes/Liang/Research/data/cluster_Kpri_20/",j,"Modeltestgroup15age",num,sep = "")
file1 = paste("D:/Research/data/cluster_Kpri_20/",j,"Modeltestgroup15age",num,sep = "")
file = paste(file1,"/","out",i,"sim.Rdata",sep = "")
load(file = file)
L = result$L
# phy = L2phylo_loc(L,loc = 1,dropextinct = dropextinct)
phy = L2phylo(L,loc = 1,dropextinct = dropextinct)
# phy = L2phylo_loc(L,loc = 1,dropextinct = dropextinct)
phy = L2phylo(L,dropextinct = dropextinct)
phy
brts=unname(sort(branching.times(phy),decreasing = TRUE)) # branching time
time.list = c(sort(c(L[,1],L[which(L[,4]!= -1),4]),decreasing = T),0)
num.species = nrow(L)
trait.table = matrix(0,nrow = length(time.list),ncol = nrow(L)+1)
trait.table[,1] = time.list
time.branching = match(L[,1],time.list)
time.end = match(L[,4],time.list)
time.end[is.na(time.end)] = length(time.list)
survival.time = cbind(time.branching,time.end)
survival.time
time.branching
trait.table
brts
time.list
time.list
num.species
trait.table
survival.time
num.species
trait.table
existing.species.table
for(i in 1:num.species){
trait.table[,i+1][time.branching[i]:time.end[i] ] = 1
}
trait.table
time.branching
existing.species.table = trait.table[-1,-1]
existing.species.table
trait.table
time.diff = -diff(trait.table[,1])
time.diff
time.diff = time.diff[-1]
time.diff
beta_co = 1
gamma_co = 1
theta = 5
